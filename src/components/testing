import React, { Component } from 'react';
import { Col, Grid, Nav, NavItem, Row, Tab, Tabs } from 'react-bootstrap';
import { Link } from 'react-router-dom';
import firebase from 'firebase';

import './form2a.css';

import './maintenanceReport.css';

import { PDFExport } from '@progress/kendo-react-pdf';
import { fire } from '../../fire';

import BootstrapTable from 'react-bootstrap-table-next';

import { TiArrowSortedDown, TiBrush, TiArrowSortedUp, TiPencil, TiTrash } from "react-icons/ti";

import domtoimage from 'dom-to-image';
import { SketchPicker } from 'react-color';
import fileDownload from "js-file-download";


import { ComposedChart, LineChart, LabelList, ResponsiveContainer, ReferenceArea, AreaChart, Brush, Area, Line, XAxis, YAxis, BarChart, Bar, CartesianGrid, Tooltip, Legend, Label} from 'recharts';


import Griddle from 'griddle-react';

const TabPane = Tabs.TabPane;

const styles = {
  topPad: {
    paddingTop: "20px"
  },
};



function FlexRow(props) {
return (
  <div style={{ display: "flex", flexFlow: "row nowrap", flex: "1 1 auto" }}>
              {props.children}
  </div>
      );
  }

  function FlexColumn(props) {
      return (
  <div style={{ display: "flex", flexFlow: "column nowrap", flex: "1 1 auto" }}>
              {props.children}
  </div>
      );
  }





export default class maintenanceReports extends Component {


    constructor(props) {
        super(props);
        this.state = {





          //data results
          sampleDate: '',


          //random id and key, key is for the tab number
          id: '',
          key: "1",
          idKey: '',
          page: '',
          area: '',
          displayColorPicker: false,




          //this is the object array for the table
          samples: [],
          orders: [],
          orders2: [],
          dataList: [],
          filter: "",
          blob: null,
          file:null,
          blobUrl: null,

          imageSource: '',


          //these are for the graphs


          //for drawers
          visible: false,
          visible1: false,
          visible2: false,

          overwriteDisplay: 'none',
          addDisplay: null,










          //Inputs for Profile Page
          lakeName: '',
          locationCity: '',
          locationState: '',
          managementContact: '',
          hoaContact: '',
          managementContactNumber: '',
          hoaContactNumber: '',

          //testing
          test: '<Area',
          test1: '</Area>',

          Parameter_List: [],
          Parameter_List1: [],
          Parameter_Name: '',
          Parameter_Units: '',
          Parameter_Input: '',

          name: "",
      shareholders: [{ name: "" }],

          parameters: '',
          graphingData: [],
          graphingKeys: [],
          tableKeys: [],
          tableKeys1: [],
          tableData: [],
          graphInfo: '',
          graphInfoReverse: '',
          graphKeys: [],
          table1Keys: '',
          tableData: {},
          columnData: [{}
                            ],

          reportValues: [],
          reportKeys: [],
          reportData: [],



        }
        //these are triggered events.  handleChange is for text box changes
        //handlesubmit is for the form being submitted.
        //every event trigger needs to be bound like is below with .bind
        //we might now have to do this anymore with the newest version of react, but i have it to be safe.
        this.handleChange = this.handleChange.bind(this);
        this.filter = this.filter.bind(this);
        this.handleSelect = this.handleSelect.bind(this);




      }

      //event triggered when text boxes of forms, values are changed
      handleChange(e) {
        const name = e.target.name;
    const value = e.target.value;
    this.setState({ [name]: value });
        this.setState({
          [e.target.name]: e.target.value
        });
        let filter = this.state.filter;
        let dataList = this.state.orders.filter(function (item) {
        return Object.values(item).map(function (value) {
        return String(value);
              }).find(function (value) {
                   return value.includes(filter);
        });

        });
        let newState = [];





      }
      //event triggered when form is submitted


     snapshotToArray(snapshot) {
        var returnArr = [];

        snapshot.forEach(function(childSnapshot) {
            var item = childSnapshot.val();
            item.key = childSnapshot.key;

            returnArr.push(item);
        });

        return returnArr;
    };





      componentDidMount(itemId) {
        this.removeAuthListener = fire.auth().onAuthStateChanged(user=>{

          console.log(user.uid);






          this.setState({
            userID: user.uid,

          })




          const parameterListRef = fire.database().ref(`maintenanceList/${user.uid}`);
          parameterListRef.on('value', (snapshot) => {
            let parameterList = snapshot.val();
            console.log(parameterList);

            let newState = [];
          for (let order in parameterList) {
            newState.push({
              id: order,
              Maintenance_Item: parameterList[order].Maintenance_Item,


            });
            console.log(newState);
          }
          this.setState({
            Parameter_List: newState,
          })
          })

          const parameterList1Ref = fire.database().ref(`maintenanceReport/${user.uid}`);
          parameterList1Ref.on('value', (snapshot) => {
            let parameterList1 = snapshot.val();
            console.log(parameterList1);

            this.setState({
              graphingData: parameterList1,
            })

            let newState1 = [];
          for (let order in parameterList1) {
            newState1.push({
              id: order,
              date: parameterList1[order].Date,

            });

          }




          let snapArray = this.snapshotToArray(snapshot);

          let graphInfo = this.snapshotToArray(snapshot);
          let graphInfoReverse = this.snapshotToArray(snapshot);


          graphInfo.sort(function(a, b) {
            if (a.date === b.date) {
              return 0;
            }
            return a.date > b.date ? 1 : -1;
        });

        graphInfoReverse.sort(function(a, b) {
          if (b.date === a.date) {
            return 0;
          }
          return b.date > a.date ? 1 : -1;
      });

      if (snapArray.length == 0) {
        console.log("do nothing")
      }

      if (snapArray.length > 0) {
        let snapArrayReverse = snapArray.reverse();
        let graphKeys = Object.keys(snapArrayReverse[0]);

        graphKeys = graphKeys.filter(e => e !== 'id');
        graphKeys = graphKeys.filter(e => e !== 'key');
        graphKeys = graphKeys.filter(e => e !== 'date');


        console.log(graphKeys);



        let tableData1 = [];
        for (let i=0; i < graphInfoReverse.length; i++) {
        //push send this data to the back of the chartData variable above.
        tableData1.push(Object.keys(graphInfoReverse[i]));

        }
        console.log(tableData1);

        let tableData2 = tableData1.map(function(a){return a.length;});
tableData2.indexOf(Math.max.apply(Math, tableData2));

let indexOfMaxValue = tableData2.reduce((iMax, x, i, arr) => x > arr[iMax] ? i : iMax, 0);

          console.log(tableData2);
          console.log(indexOfMaxValue);

          let table1Keys = Object.keys(graphInfoReverse[indexOfMaxValue]);
          table1Keys = table1Keys.filter(e => e !== 'id');
          table1Keys = table1Keys.filter(e => e !== 'key');
          console.log(table1Keys);






            this.setState({
              graphInfo: graphInfo,
              graphInfoReverse: graphInfoReverse,
              graphKeys: graphKeys,
              table1Keys: table1Keys,


            })
            console.log(this.state.graphInfo);
            console.log(this.state.graphInfoReverse);
            console.log(this.state.graphKeys);
            console.log(this.state.columnData);
            console.log(this.state.Parameter_List);

            let tableData = [];
            for (let i=0; i < table1Keys.length; i++) {
            //push send this data to the back of the chartData variable above.
            tableData.push({dataField: table1Keys[i], text: table1Keys[i],
            headerStyle:{ whiteSpace: 'auto' }, style:{whiteSpace: 'auto'}, width: '150px',

          });

            }

            tableData.push({dataField: 'delete',
             text: 'Delete',
             formatter: this.deleteRow.bind(this),

            })
            tableData.push({dataField: 'edit',
             text: 'Edit',
             formatter: this.editEquipment.bind(this),

            })

            tableData.push({dataField: 'Download',
             text: 'Download',
             formatter: this.previewReport.bind(this),

            })





            var arr = snapshot.val();

            var arr1 = Object.keys(arr);


            console.log(arr1);





            console.log(tableData);

            this.setState({
              columnData: tableData,

            })

            console.log(this.state.tableData);








          }










          })
          const profileRef = fire.database().ref(`profileInformation/${user.uid}`);
          profileRef.on('value', (snapshot) => {
            var that = this;


          this.setState({
            lakeName: snapshot.child('lakeName').val(),
            locationCity: snapshot.child('locationCity').val(),
            locationState: snapshot.child('locationState').val(),
            managementContact: snapshot.child('managementContact').val(),
            hoaContact: snapshot.child('hoaContact').val(),
            managementContactNumber: snapshot.child('managementContactNumber').val(),
            hoaContactNumber: snapshot.child('hoaContactNumber').val(),
            latitude: snapshot.child('latitude').val(),
            longitude: snapshot.child('longitude').val(),
            center: {
              lat: snapshot.child('latitude').val(),
              lng: snapshot.child('longitude').val()
            },

          });
          console.log(this.state.center);
                    var myLat = `${this.state.latitude}`;
                      var myLon = `${this.state.longitude}`;
                   let API_WEATHER = `http://api.openweathermap.org/data/2.5/weather?lat=${myLat}&lon=${myLon}&units=imperial&appid=${'30573b68170d7f4400c7ac9c1c671ccf'}`;

                   fetch(API_WEATHER)
                .then(response => response.json())
                .then(responseJson => {
                  console.log(responseJson);
                  console.log(responseJson.weather);
                  console.log(responseJson.name);
                  this.setState({
                    isLoading: false,
                    dataSource: responseJson,
                    currentCity: this.state.lakeName,
                    currentTemp: responseJson.main.temp,
                    currentIcon: 'http://openweathermap.org/img/w/' + responseJson.weather[0].icon + '.png',
                    currentDescription: responseJson.weather[0].main,
                    currentHumidity: responseJson.main.humidity,


                  });
                })
                .catch(error => {
                  console.log(error);
                });


        });

          const parameter2ist1Ref = fire.database().ref(`maintenanceReport/${user.uid}`);
          parameter2ist1Ref.on('value', (snapshot) => {
            let parameterList2 = snapshot.val();
            console.log(parameterList2);

          })






    })
  }



    fillStates(itemId) {

      this.removeAuthListener = fire.auth().onAuthStateChanged(user=>{


      const sample1Ref = fire.database().ref(`/maintenanceList/${user.uid}/${itemId}`);

      let id = fire.database().ref().child(`/maintenanceList/${user.uid}/${itemId}`).key;

      sample1Ref.on('value', (snapshot) => {

        this.setState({
          Maintenance_Item: snapshot.child('Maintenance_Item').val(),

          id: id,
          overwriteDisplay: null,
          addDisplay: 'none',



        });




});

    });
  }

  fillEquipment(itemId) {

    this.removeAuthListener = fire.auth().onAuthStateChanged(user=>{


    const sample1Ref = fire.database().ref(`/maintenanceReport/${user.uid}/${itemId}`);

    let id = fire.database().ref().child(`/maintenanceReport/${user.uid}/${itemId}`).key;

    sample1Ref.on('value', (snapshot) => {

      let information = snapshot.val();
        console.log(information);
        delete information.id;

        console.log(Object.keys(information));
        let keys = Object.keys(information);

        console.log(keys);

        console.log(Object.values(information));
        let values = Object.values(information);

        console.log(values);

        let tableData1 = [];
        for (let i=0; i < values.length; i++) {
        //push send this data to the back of the chartData variable above.
        tableData1.push({Maintenance_Item: keys[i], Maintenance_Input: values[i]});

        }
        console.log(tableData1);

        this.setState({
          id: id,
          Parameter_List: tableData1,
          reportValues: values,
          reportKeys: keys,
          visible1: true,
        })



});

  });
}











    handleSelect(key) {
  this.setState({key});
}







exportPDF = () => {
  this.resume.save();
}

rawMarkup(){
  var rawMarkup = this.props.content
  return { __html: rawMarkup };
}









editRow(row, isSelected, e, id) {

  return (
      <div style={{textAlign: 'center'}}>
    <Icon type="edit" style={{fontSize: '24px'}}
    onClick={() => this.fillStates(`${isSelected.id}`)}>
      Click me
    </Icon>
    </div>
  )
}

editEquipment(row, isSelected, e, id) {

  return (
      <div style={{textAlign: 'center'}}>
    <Icon type="edit" style={{fontSize: '24px'}}
    onClick={() => this.fillEquipment(`${isSelected.key}`)}>
      Click me
    </Icon>
    </div>
  )
}



  onSubmit(event) {
    event.preventDefault();
  }



showDrawer = () => {
  this.setState({
    visible: true,
  });
};
onClose = () => {
  this.setState({
    visible: false,
    visible1: false,
    visible2: false,
  });
};



fillParameterInfo = (e) => {
  e.preventDefault();
  //fire.database().ref('samples') refers to the main title of the fire database.
  this.removeAuthListener = fire.auth().onAuthStateChanged(user=>{
  const parameterListRef = fire.database().ref(`maintenanceList/${user.uid}`);

  const parameterInfo = {
    Maintenance_Item: this.state.Maintenance_Item,

  }

  parameterListRef.push(parameterInfo);
  //this.setState is used to clear the text boxes after the form has been submitted.
  this.setState({
    Maintenance_Item: '',

  });

});
}

editParameterInfo = (e) => {
  e.preventDefault();
  //fire.database().ref('samples') refers to the main title of the fire database.
  this.removeAuthListener = fire.auth().onAuthStateChanged(user=>{


  const sampleRef = fire.database().ref(`/maintenanceList/${user.uid}/${this.state.id}`);



  sampleRef.child("Maintenance_Item").set(this.state.Maintenance_Item);


  this.setState({
    overwriteDisplay: 'none',
    addDisplay: null,
  })





  //this.setState is used to clear the text boxes after the form has been submitted.


});
}

handleSampleChange = idx => evt => {
  const newParameters = this.state.Parameter_List.map((parameter, sidx) => {
    if (idx !== sidx) return parameter;
    return { ...parameter, Maintenance_Input: evt.target.value };
  });
  this.setState({ Parameter_List: newParameters });
  console.log(this.state.Parameter_List);


  };

  handleTableChange = idx => evt => {
    const newParameters = this.state.Parameter_List.map((parameter, sidx) => {
      if (idx !== sidx) return parameter;
      return { ...parameter, Maintenance_Input: evt.target.value };
    });
    this.setState({ Parameter_List: newParameters });
    console.log(this.state.Parameter_List);


    };

  sampleSubmit = (e) => {
    e.preventDefault();
    //fire.database().ref('samples') refers to the main title of the fire database.
    this.removeAuthListener = fire.auth().onAuthStateChanged(user=>{
    const parameterListRef = fire.database().ref(`maintenanceReport/${user.uid}`);

    const parameterInfo = {
      list: this.state.Parameter_List.map((parameter) => {

                        return (
                        {
                        Maintenance_Item: parameter.Maintenance_Item,
                        Maintenance_Input: parameter.Maintenance_Input,
                      }
                        )
                      })

    }
    console.log(parameterInfo.list);

  let kvArray = parameterInfo.list;

  let array = kvArray.map(parameter => {
    var rObj = {};
    rObj[parameter.Maintenance_Item] = parameter.Maintenance_Input;
    return rObj;


  })


console.log(array);
this.setState({
  parameters: array,
})
console.log(this.state.parameters);




var arr = this.state.Parameter_List;
var object = arr.reduce(
    (obj, item) => Object.assign(obj, {id: item.id, [item.Maintenance_Item]: item.Maintenance_Input}) ,{});

console.log(object);

parameterListRef.push(object);

    //this.setState is used to clear the text boxes after the form has been submitted.
    this.setState({
      Maintenance_Item: '',
      Maintenance_Input: '',

      visible: false,
      visible1: false,
      visible2: false,

    });

  });
  }

  sampleOverwrite = (e) => {
    e.preventDefault();
    //fire.database().ref('samples') refers to the main title of the fire database.
    this.removeAuthListener = fire.auth().onAuthStateChanged(user=>{
    const parameterListRef = fire.database().ref(`maintenanceReport/${user.uid}`);

    const parameterInfo = {
      list: this.state.Parameter_List.map((parameter) => {

                        return (
                        {
                        Maintenance_Item: parameter.Maintenance_Item,
                        Maintenance_Input: parameter.Maintenance_Input,
                      }
                        )
                      })

    }
    console.log(parameterInfo.list);

  let kvArray = parameterInfo.list;

  let array = kvArray.map(parameter => {
    var rObj = {};
    rObj[parameter.Maintenance_Item] = parameter.Maintenance_Input;
    return rObj;


  })


console.log(array);
this.setState({
  parameters: array,
})
console.log(this.state.parameters);




var arr = this.state.Parameter_List;
var object = arr.reduce(
    (obj, item) => Object.assign(obj, {id: this.state.id, [item.Maintenance_Item]: item.Maintenance_Input}) ,{});

console.log(object);

parameterListRef.child(this.state.id).set(object);

    //this.setState is used to clear the text boxes after the form has been submitted.
    this.setState({
      Maintenance_Item: '',
      Maintenance_Input: '',

      visible: false,
      visible1: false,
      visible2: false,

    });

  });
  }





   removesample(itemId) {

    const sampleRef = fire.database().ref(`/maintenanceReport/${this.state.userID}/${itemId}`);

    sampleRef.remove();


  }

  removesample1(itemId) {

   const sampleRef = fire.database().ref(`/maintenanceList/${this.state.userID}/${itemId}`);

   sampleRef.remove();


 }

   deleteRow(row, isSelected, e, id, key) {

    return (
      <div style={{textAlign: 'center'}}>
      <Icon type="delete" style={{fontSize: '24px'}}
      onClick={() => this.removesample(isSelected.key)}>
        Click me
      </Icon>
      </div>
    )
  }

  deleteRow1(row, isSelected, e, id, key) {

   return (
     <div style={{textAlign: 'center'}}>
     <Icon type="delete" style={{fontSize: '24px'}}
     onClick={() => this.removesample1(isSelected.key)}>
       Click me
     </Icon>
     </div>
   )
 }

 displayButtons = () => {

this.setState({
  overwriteDisplay: 'none',
  addDisplay: null,
})


 }

 previewReport(row, isSelected, e, id) {

   return (
       <div style={{textAlign: 'center'}}>
     <Icon type="download" style={{fontSize: '24px'}}
     onClick={() => this.reviewReport(`${isSelected.key}`)}>
       Click me
     </Icon>
     </div>
   )
 }

reviewReport = (itemId) => {

  this.removeAuthListener = fire.auth().onAuthStateChanged(user=>{


  const sample1Ref = fire.database().ref(`/maintenanceReport/${user.uid}/${itemId}`);

  let id = fire.database().ref().child(`/maintenanceReport/${user.uid}/${itemId}`).key;

  sample1Ref.on('value', (snapshot) => {




    let information = snapshot.val();
      console.log(information);
      delete information.id;

      console.log(Object.keys(information));
      let keys = Object.keys(information);

      console.log(keys);

      console.log(Object.values(information));
      let values = Object.values(information);

      console.log(values);

      let tableData1 = [];
      for (let i=0; i < values.length; i++) {
      //push send this data to the back of the chartData variable above.
      tableData1.push({reportKey: keys[i], reportValue: values[i]});

      }
      console.log(tableData1);

      this.setState({
        reportData: tableData1,
        reportValues: values,
        reportKeys: keys,
      })





    this.setState({


      id: id,

        key: "3",


    });




});

});


}



filter = (url) => {



  domtoimage.toBlob(document.getElementById('my-node'))
      .then((blob) => {


          console.log(blob);
          const blobUrl = URL.createObjectURL(blob);

          console.log(blobUrl);

          this.setState({
            blobUrl: blobUrl,
          })

      });


}




      render() {

        let { file } = this.state
        console.log(this.state.file);
        let url = file && URL.createObjectURL(file)


        let img = document.createElement("my-node");









        function handleButtonClick(e) {

          console.log('click left button', e);
        }

        function handleMenuClick(e) {

          console.log('click', e);
        }






   const popover = {
      position: 'absolute',
      zIndex: '2',
    }
    const cover = {
      position: 'fixed',
      top: '0px',
      right: '0px',
      bottom: '0px',
      left: '0px',
    }






        return (
          <Grid>





    <Tabs defaultActiveKey={1} id="uncontrolled-tab-example">
      <Tab eventKey={1} title="Section A">


        <Tab.Container id="left-tabs-example" defaultActiveKey="first">
          <Row className="clearfix">
            <Col sm={2}>
              <Nav bsStyle="pills" stacked>
                <NavItem eventKey="first">Section A.1</NavItem>
                <NavItem eventKey="second">Section A.2</NavItem>
                <NavItem eventKey="third">Section A.3</NavItem>
                <NavItem eventKey="fourth">Section A.4</NavItem>
                <NavItem eventKey="fith">Section A.5</NavItem>
                <NavItem eventKey="sixth">Section A.6</NavItem>
                <NavItem eventKey="seventh">Section A.7</NavItem>
                <NavItem eventKey="eigth">Section A.8</NavItem>
                <NavItem eventKey="ninth">Section A.9</NavItem>
                <NavItem eventKey="tenth">Section A.10</NavItem>
                <NavItem eventKey="eleventh">Section A.11</NavItem>
                <NavItem eventKey="twelveth">Section A.12</NavItem>
              </Nav>
            </Col>
            <Col sm={2}>
              <Tab.Content animation>
                <Tab.Pane eventKey="first">

         <FlexRow>  <Grid>
            <Row>
              <Col xs={400} md={1000}>
          <section className='add-item'>

            <form onSubmit={this.handleSubmit}>
                <p>Facility Name</p>
                  <input type="text" name="facilityName" placeholder="What's your Facility name" onChange={this.handleChange} value={this.state.facilityName} />
                  <p>Mailing Address</p>
                <input type="text" name="mailingAddress" placeholder="What's your Address?" onChange={this.handleChange} value={this.state.mailingAddress} />
                <p>Contact Person</p>
                <input type="text" name="contactPerson" placeholder="Who is your contact Person?" onChange={this.handleChange} value={this.state.contactPerson} />
                  <p>Title</p>
                  <input type="text" name="title" placeholder="Who is your contact Person?" onChange={this.handleChange} value={this.state.title} />
                    <p>Telephone Number</p>
                    <input type="text" name="telephoneNumber" placeholder="Who is your contact Person?" onChange={this.handleChange} value={this.state.telephoneNumber} />
                      <p>Facility Address</p>
                      <input type="text" name="facilityAddress" placeholder="Who is your contact Person?" onChange={this.handleChange} value={this.state.facilityAddress} />
             <FlexRow> <button style={{ width: "125px"}}>Add sample</button>
              <button style={{ marginLeft: "200px", width: "125px"}} className="k-button" onClick={() => { this.pdfExportComponent.save(); }}>

                        Export PDF
                    </button> </FlexRow>
                </form>

          </section>
          </Col>
          </Row>
          </Grid>
          <div
                    style={{ position: "relative"}}>
                    <div
                    style={{ position: "absolute", left: 0, top: 0}}>

<PDFExport
                    forcePageBreak=".page-break"
                    ref={(component) => this.pdfExportComponent = component}
                >


                    {/* For details see:
                    http://www.telerik.com/kendo-react-ui/components/drawing/drawing-dom/#toc-dimensions-and-css-units */}
                          <div style={{  width: "612px", height: "792px" }}>
                            <div style={{ position: "absolute", left: 0, top: 0 }}>
                              <img
                                style={{boxShadow: '5px 5px 5px black'}}
                                src={backgroundPhoto2}
                                width={612}
                                height={792}
                              />
                            </div>
                              <div
                                style={{ position: "absolute", left: "41.39px", top: "27.78px" }}
                                className="cls_006"
                              >
                                <span className="cls_006">FACILITY NAME AND PERMIT NUMBER:</span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "41.39px", top: "40.78px" }}
                                className="cls_006"
                              >
                                <span className="cls_006">{this.state.facilityName}</span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "473.40px", top: "27.90px" }}
                                className="cls_007"
                              >
                                <span className="cls_007">Form Approved 1/14/99</span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "473.40px", top: "35.94px" }}
                                className="cls_007"
                              >
                                <span className="cls_007">OMB Number 2040-0086</span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "47.46px", top: "61.56px" }}
                                className="cls_008"
                              >
                                <span className="cls_008">FORM</span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "50.64px", top: "71.52px" }}
                                className="cls_010"
                              >
                                <span className="cls_010">2A</span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "90.90px", top: "70.20px" }}
                                className="cls_010"
                              >
                                <span className="cls_010">
                                  NPDES FORM 2A APPLICATION OVERVIEW
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "45.24px", top: "90.30px" }}
                                className="cls_008"
                              >
                                <span className="cls_008">NPDES</span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "41.40px", top: "113.40px" }}
                                className="cls_011"
                              >
                                <span className="cls_011">APPLICATION OVERVIEW</span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "41.40px", top: "134.64px" }}
                                className="cls_011"
                              >
                                <span className="cls_011">
                                  Form 2A has been developed in a modular format and consists of a
                                  "Basic Application Information" packet
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "41.40px", top: "146.16px" }}
                                className="cls_011"
                              >
                                <span className="cls_011">
                                  and a "Supplemental Application Information" packet. The Basic
                                  Application Information packet is divided
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "41.40px", top: "157.68px" }}
                                className="cls_011"
                              >
                                <span className="cls_011">
                                  into two parts. All applicants must complete Parts A and C. Applicants
                                  with a design flow greater than or
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "41.40px", top: "169.14px" }}
                                className="cls_011"
                              >
                                <span className="cls_011">
                                  equal to 0.1 mgd must also complete Part B. Some applicants must also
                                  complete the Supplemental
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "41.40px", top: "180.66px" }}
                                className="cls_011"
                              >
                                <span className="cls_011">
                                  Application Information packet. The following items explain which parts of
                                  Form 2A you must complete.
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "41.40px", top: "201.90px" }}
                                className="cls_011"
                              >
                                <span className="cls_011">BASIC APPLICATION INFORMATION:</span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "41.40px", top: "219.42px" }}
                                className="cls_008"
                              >
                                <span className="cls_008">
                                  A. Basic Application Information for all Applicants.
                                </span>
                                <span className="cls_009">
                                  {" "}
                                  All applicants must complete questions A.1 through A.8. A
                                  treatment
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "62.99px", top: "229.80px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  works that discharges effluent to surface waters of the United
                                  States must also answer questions A.9 through A.12.
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "41.39px", top: "246.11px" }}
                                className="cls_008"
                              >
                                <span className="cls_008">
                                  B. Additional Application Information for Applicants with a
                                  Design Flow{" "}
                                </span>
                                <span className="cls_024">&gt;</span>
                                <span className="cls_008"> 0.1 mgd.</span>
                                <span className="cls_009">
                                  {" "}
                                  All treatment works that have design
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "62.99px", top: "256.50px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  flows greater than or equal to 0.1 million gallons per day must
                                  complete questions B.1 through B.6.
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "41.39px", top: "272.81px" }}
                                className="cls_008"
                              >
                                <span className="cls_008">C. Certification.</span>
                                <span className="cls_009">
                                  {" "}
                                  All applicants must complete Part C (Certification).
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "41.40px", top: "292.14px" }}
                                className="cls_011"
                              >
                                <span className="cls_011">
                                  SUPPLEMENTAL APPLICATION INFORMATION:
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "41.40px", top: "309.66px" }}
                                className="cls_008"
                              >
                                <span className="cls_008">D.</span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "63.02px", top: "309.66px" }}
                                className="cls_008"
                              >
                                <span className="cls_008">Expanded Effluent Testing Data.</span>
                                <span className="cls_009">
                                  {" "}
                                  A treatment works that discharges effluent to surface waters of
                                  the United States and
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "63.01px", top: "320.04px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  meets one or more of the following criteria must complete Part D
                                  (Expanded Effluent Testing Data):
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "63.01px", top: "336.42px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  1. Has a design flow rate greater than or equal to 1 mgd,
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "63.01px", top: "352.73px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  2. Is required to have a pretreatment program (or has one in
                                  place), or
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "63.01px", top: "369.11px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  3. Is otherwise required by the permitting authority to provide
                                  the information.
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "41.41px", top: "388.37px" }}
                                className="cls_008"
                              >
                                <span className="cls_008">E.</span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "63.02px", top: "388.37px" }}
                                className="cls_008"
                              >
                                <span className="cls_008">Toxicity Testing Data.</span>
                                <span className="cls_009">
                                  {" "}
                                  A treatment works that meets one or more of the following
                                  criteria must complete Part E (Toxicity
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "63.01px", top: "398.81px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">Testing Data):</span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "63.01px", top: "415.13px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  1. Has a design flow rate greater than or equal to 1 mgd,
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "63.01px", top: "431.51px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  2. Is required to have a pretreatment program (or has one in
                                  place), or
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "63.01px", top: "447.83px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  3. Is otherwise required by the permitting authority to submit
                                  results of toxicity testing.
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "41.41px", top: "467.15px" }}
                                className="cls_008"
                              >
                                <span className="cls_008">F.</span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "62.99px", top: "467.15px" }}
                                className="cls_008"
                              >
                                <span className="cls_008">
                                  Industrial User Discharges and RCRA/CERCLA Wastes.
                                </span>
                                <span className="cls_009">
                                  {" "}
                                  A treatment works that accepts process wastewater from any
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "63.01px", top: "477.53px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  significant industrial users (SIUs) or receives RCRA or CERCLA
                                  wastes must complete Part F (Industrial User Discharges and
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "63.01px", top: "487.90px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  RCRA/CERCLA Wastes). SIUs are defined as:
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "63.01px", top: "504.22px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  1. All industrial users subject to Categorical Pretreatment
                                  Standards under 40 Code of Federal Regulations (CFR) 403.6 and
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "77.41px", top: "514.60px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  40 CFR Chapter I, Subchapter N (see instructions); and
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "63.01px", top: "530.92px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  2. Any other industrial user that:
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "77.41px", top: "547.23px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  a. Discharges an average of 25,000 gallons per day or more of
                                  process wastewater to the treatment works (with certain
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "91.82px", top: "557.61px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">exclusions); or</span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "77.42px", top: "573.93px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  b. Contributes a process wastestream that makes up 5 percent or
                                  more of the average dry weather hydraulic or organic
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "91.82px", top: "584.30px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  capacity of the treatment plant; or
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "77.42px", top: "600.62px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">
                                  c. Is designated as an SIU by the control authority.
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "41.42px", top: "622.94px" }}
                                className="cls_008"
                              >
                                <span className="cls_008">G.</span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "63.03px", top: "622.94px" }}
                                className="cls_008"
                              >
                                <span className="cls_008">Combined Sewer Systems.</span>
                                <span className="cls_009">
                                  A treatment works that has a combined sewer system must complete
                                  Part G (Combined Sewer
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "63.02px", top: "633.32px" }}
                                className="cls_009"
                              >
                                <span className="cls_009">Systems).</span>
                              </div>
                              <div
                                style={{
                                  position: "absolute",
                                  left: "324.62px",
                                  top: "1457.52px"
                                }}
                                className="cls_013"
                              >
                                <span className="cls_013">
                                  ALL APPLICANTS MUST COMPLETE PART C (CERTIFICATION)
                                </span>
                              </div>
                              <div
                                style={{ position: "absolute", left: "36.00px", top: "665.62px" }}
                                className="cls_005"
                              >
                                <span className="cls_005">
                                  EPA Form 3510-2A (Rev. 1-99). Replaces EPA forms 7550-6 &amp;
                                  7550-22.
                                </span>
                              </div>
                              <div
                                style={{
                                  position: "absolute",
                                  left: "530.58px",
                                  top: "760.68px"
                                }}
                                className="cls_005"
                              >
                                <span className="cls_005">Page 1 of 21</span>
                              </div>


                            </div>



                </PDFExport>
                </div>
              </div></FlexRow>




               </Tab.Pane>

                <Tab.Pane eventKey="second">

                  <section className='add-item'>
                    <Grid>
                      <Row>
                    <Col xs={6} md={6}>

                    <form onSubmit={this.handleSubmit}>
                        <p>Applicant name</p>
                          <input type="text" name="applicantName" placeholder="What's your Facility name" onChange={this.handleChange} value={this.state.applicantName} />
                          <p>Mailing Address</p>
                        <input type="text" name="mailingAddressA2" placeholder="What's your Address?" onChange={this.handleChange} value={this.state.mailingAddressA2} />
                        <p>Contact Person</p>
                        <input type="text" name="contactPersonA2" placeholder="Who is your contact Person?" onChange={this.handleChange} value={this.state.contactPersonA2} />
                          <p>Title</p>
                          <input type="text" name="titleA2" placeholder="Who is your contact Person?" onChange={this.handleChange} value={this.state.titleA2} />
                            <p>Telephone Number</p>
                            <input type="text" name="telephoneNumberA2" placeholder="Who is your contact Person?" onChange={this.handleChange} value={this.state.telephoneNumberA2} />
                                <button>Add sample</button>
                        </form>
                      </Col>
                      </Row>
                      </Grid>

                  </section>


                </Tab.Pane>

                <Tab.Pane eventKey="third">

                  content

                </Tab.Pane>
              </Tab.Content>
            </Col>
          </Row>
        </Tab.Container>


      </Tab>
      <Tab eventKey={2} title="Section B">
      Tab 3 content

      </Tab>
      <Tab eventKey={4} title="Section D">
        Tab 3 content
      </Tab>
      <Tab eventKey={5} title="Section E">
        Tab 3 content
      </Tab>
      <Tab eventKey={6} title="Section F">
        Tab 3 content
      </Tab>
      <Tab eventKey={7} title="Section G">
        Tab 3 content
      </Tab>
      <Tab eventKey={8} title="Full Permit">

        <button className="k-button" onClick={() => { this.pdfExportComponent.save(); }}>
                        Export PDF
                    </button>
          <PDFExport paperSize={'Letter'}
      fileName="_____.pdf"
      title=""
      subject=""
      keywords=""
      ref={(r) => this.resume = r}>
          <div style={{
              height: 792,
              width: 612,
              padding: '20px',
              backgroundColor: 'white',
              boxShadow: '5px 5px 5px black',
              margin: 'auto',
              overflowX: 'hidden',
              overflowY: 'hidden'}}>

              <div
                style={{
                  position: "absolute",
                  left: "50%",
                  marginLeft: "-306px",
                  top: 0,
                  width: 612,
                  height: 792,
                  borderStyle: "outset",
                  overflow: "hidden",

                }}
              >
                <div style={{ position: "absolute", left: 0, top: 0 }}>
                  <img
                    src={backgroundPhoto1}
                    width={612}
                    height={792}
                  />
                </div>
                <div
                  style={{ position: "absolute", left: "259.92px", top: "70.68px" }}
                  className="cls_002"
                >
                  <span className="cls_002">Disclaimer</span>
                </div>
                <div
                  style={{
                    position: "absolute",
                    left: "115.62px",
                    top: "134.64px"
                  }}
                  className="cls_003"
                >
                  <span className="cls_003">
                    This is an updated PDF document that allows you to type your
                    information
                  </span>
                </div>
                <div
                  style={{
                    position: "absolute",
                    left: "115.62px",
                    top: "148.44px"
                  }}
                  className="cls_003"
                >
                  <span className="cls_003">
                    directly into the form, print it, and save the completed form.
                  </span>
                </div>
                <div
                  style={{
                    position: "absolute",
                    left: "115.62px",
                    top: "176.04px"
                  }}
                  className="cls_003"
                >
                  <span className="cls_003">
                    Note: This form can be viewed and saved only using Adobe Acrobat
                    Reader
                  </span>
                </div>
                <div
                  style={{
                    position: "absolute",
                    left: "115.62px",
                    top: "189.84px"
                  }}
                  className="cls_003"
                >
                  <span className="cls_003">
                    version 7.0 or higher, or if you have the full Adobe
                    Professional version.
                  </span>
                </div>
                <div
                  style={{
                    position: "absolute",
                    left: "115.62px",
                    top: "217.44px"
                  }}
                  className="cls_003"
                >
                  <span className="cls_003">Instructions:</span>
                </div>
                <div
                  style={{
                    position: "absolute",
                    left: "133.62px",
                    top: "231.24px"
                  }}
                  className="cls_003"
                >
                  <span className="cls_003">1. Type in your information</span>
                </div>
                <div
                  style={{
                    position: "absolute",
                    left: "133.62px",
                    top: "245.04px"
                  }}
                  className="cls_003"
                >
                  <span className="cls_003">2. Save file (if desired)</span>
                </div>
                <div
                  style={{
                    position: "absolute",
                    left: "133.62px",
                    top: "258.84px"
                  }}
                  className="cls_003"
                >
                  <span className="cls_003">3. Print the completed form</span>
                </div>
                <div
                  style={{
                    position: "absolute",
                    left: "133.62px",
                    top: "272.64px"
                  }}
                  className="cls_003"
                >
                  <span className="cls_003">4. Sign and date the printed copy</span>
                </div>
                <div
                  style={{
                    position: "absolute",
                    left: "133.62px",
                    top: "286.44px"
                  }}
                  className="cls_003"
                >
                  <span className="cls_003">
                    5. Mail it to the directed contact.
                  </span>
                </div>
              </div>







          </div>
  </PDFExport>






      </Tab>
    </Tabs>



      </Grid>
    )
  }
}
